from aiogram import Router
from aiogram.types import ErrorEvent
import logging

router = Router()

@router.errors()
async def handle_errors(error: ErrorEvent):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger(__name__)
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %s", 
            str(error.exception),
            exc_info=True
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–ø–¥–µ–π—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
        update = error.update
        if update is None:
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç message
        message = None
        if hasattr(update, 'message'):
            message = update.message
        elif hasattr(update, 'callback_query'):
            message = update.callback_query.message
            
        if message is None:
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
            "–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫
        logger.critical(
            "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: %s",
            str(e),
            exc_info=True
        ) 